PS C:\earthquake_project> python 3class_balanced_dataset.py
🎯 NEW2 시리즈 3클래스 병합 및 분할
============================================================
📊 NEW2 시리즈 데이터 로딩 중...
✅ kor_quake: 2308개 로드 - 형태: (2308, 40, 3, 100, 1)
✅ jpn_quake: 1564개 로드 - 형태: (1564, 40, 3, 100, 1)
⚠️ industry: 편향 방지를 위해 제외됨
✅ motor: 1604개 로드 - 형태: (1604, 40, 3, 100, 1)
✅ live: 2135개 로드 - 형태: (2135, 40, 3, 100, 1)
✅ irregular: 700개 로드 - 형태: (700, 40, 3, 100, 1)

🎯 NEW2 데이터 통합 완료:
   전체 샘플: 8311개
   데이터 형태: (8311, 40, 3, 100, 1)

📈 === 3클래스 분포 분석 ===

클래스 0 (지진): 3872개 (46.6%)
   ├── jpn_quake: 1,564개
   ├── kor_quake: 2,308개

클래스 1 (규칙적_산업진동): 1604개 (19.3%)
   ├── motor: 1,604개

클래스 2 (불규칙_생활진동): 2835개 (34.1%)
   ├── irregular: 700개
   ├── live: 2,135개

⚖️ 클래스 균형성:
   최소: 1,604개, 최대: 3,872개
   균형 비율: 2.4:1
   ⚠️ 불균형 (균형 조정 권장)

🤔 균형 조정 방법을 선택하세요:
   1. 최소값 기준 균형 조정 (권장)
   2. 균형 조정 없음 (전체 데이터 사용)
선택 (1 또는 2): 1

⚖️ === 균형 데이터셋 생성 (min) ===
목표 샘플 수: 1,604개 (클래스당)
   클래스 0: 1,604개 선택 (다운샘플링)
   클래스 1: 1,604개 선택 (다운샘플링)
   클래스 2: 1,604개 선택 (다운샘플링)
✅ 균형 데이터셋 완료: 4,812개
   최종 분포: [1604 1604 1604]

📊 === 데이터 분할 (6:2:2) ===

학습 세트: 2,886개 (60.0%)
   클래스 0: 962개
   클래스 1: 962개
   클래스 2: 962개

검증 세트: 963개 (20.0%)
   클래스 0: 321개
   클래스 1: 321개
   클래스 2: 321개

테스트 세트: 963개 (20.0%)
   클래스 0: 321개
   클래스 1: 321개
   클래스 2: 321개

💾 === 데이터셋 저장 ===
✅ train 세트 저장:
   📁 new2_3class_train_X.npy - (2886, 40, 3, 100, 1)
   📁 new2_3class_train_y.npy - (2886,)
   📁 new2_3class_train_sources.npy - (2886,)
✅ val 세트 저장:
   📁 new2_3class_val_X.npy - (963, 40, 3, 100, 1)
   📁 new2_3class_val_y.npy - (963,)
   📁 new2_3class_val_sources.npy - (963,)
✅ test 세트 저장:
   📁 new2_3class_test_X.npy - (963, 40, 3, 100, 1)
   📁 new2_3class_test_y.npy - (963,)
   📁 new2_3class_test_sources.npy - (963,)

📋 메타데이터 저장: new2_3class_metadata.json

🎉 === NEW2 3클래스 데이터셋 생성 완료! ===
📁 출력 디렉토리: ./new2_3class_dataset/
📊 총 샘플: 4,812개
🎯 클래스 수: 3개 (균형 조정: 예)
📈 분할 비율: 학습 60% : 검증 20% : 테스트 20%

🚀 다음 단계:
   1. ConvLSTM 모델 학습 시작
   2. 성능 평가 및 비교
   3. 실제 환경 테스트

✅ 스크립트 실행 완료!